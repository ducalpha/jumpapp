.TH "JUMPAPP" "1" "Apr 11, 2016" "jumpapp" "0.8"
.SH jumpapp
.PP
\f[I]A run\-or\-raise application switcher for any X11 desktop\f[]
.PP
[IMAGE: Build
Status (https://travis-ci.org/mkropat/jumpapp.svg?branch=master)] (https://travis-ci.org/mkropat/jumpapp)
.PP
The idea is simple \[em] bind a key for any given application that will:
.IP \[bu] 2
launch the application, if it\[aq]s not already running, or
.IP \[bu] 2
focus the application\[aq]s window, if it is running
.PP
Pressing the key again will cycle to the application\[aq]s next window,
if there\[aq]s more than one.
.PP
In short, \f[B]jumpapp\f[] is probably the fastest way for a
keyboard\-junkie to switch between applications in a modern desktop
environment.
Once installed (#installation), all you have to do is configure the key
bindings you want to use:
.PP
[IMAGE: Settings Example (http://i.imgur.com/dAj8NDZ.png)]
.SH Synopsis
.IP
.nf
\f[C]
Usage:\ jumpapp\ [OPTION]...\ COMMAND\ [ARG]...

Jump\ to\ (focus)\ the\ first\ open\ window\ for\ an\ application,\ if\ it\[aq]s\ running.
Otherwise,\ launch\ COMMAND\ (with\ opitonal\ ARGs)\ to\ start\ the\ application.

Options:
\ \ \-r\ \-\-\ cycle\ through\ windows\ in\ reverse\ order
\ \ \-f\ \-\-\ force\ COMMAND\ to\ launch\ if\ process\ found\ but\ no\ windows\ found
\ \ \-n\ \-\-\ do\ not\ fork\ into\ background\ when\ launching\ COMMAND
\ \ \-p\ \-\-\ always\ launch\ COMMAND\ when\ ARGs\ passed
\ \ \ \ \ \ \ \ (see\ Argument\ Passthrough\ in\ man\ page)
\ \ \-L\ \-\-\ list\ matching\ windows\ for\ COMMAND\ and\ quit
\ \ \-t\ NAME\ \-\-\ process\ window\ has\ to\ have\ NAME\ as\ the\ window\ title
\ \ \-c\ NAME\ \-\-\ find\ window\ using\ NAME\ as\ WM_CLASS\ (instead\ of\ COMMAND)
\ \ \-i\ NAME\ \-\-\ find\ process\ using\ NAME\ as\ the\ command\ name\ (instead\ of\ COMMAND)
\ \ \-w\ \-\-\ only\ find\ the\ applications\ in\ the\ current\ workspace
\f[]
.fi
.SH Argument Passthrough (\f[C]\-p\f[] option)
.PP
Many applications keep track of what windows they have open so that if
you run the command again, it will interact with the existing
application window instead of launching a new instance of the
application.
.PP
Take Firefox, for example.
If you already have a Firefox window open and you run
\f[C]firefox\ https://github.com/\f[], Firefox won\[aq]t start a new
instance.
What it does is open a new tab in the existing window and browse to the
URL you passed.
.PP
Especially in the case of Desktop Entry
files (#jumpappify-desktop-entry1), we want to preserve this behavior.
With \f[C]jumpapp\ \-p\ COMMAND\ [ARGs]...\f[], when you include one or
more ARGs, COMMAND is always executed in order to pass the ARGs to the
running application.
But if no ARGs are included, \f[B]jumpapp\f[] will behave normally.
.SH A Wrapper Around wmctrl(1)
.PP
All the heavy lifting is done by Tomáš Stýblo\[aq]s powerful
\f[B]wmctrl\f[] (http://tomas.styblo.name/wmctrl/).
You must have it installed to use \f[B]jumpapp\f[].
.PP
\f[B]jumpapp\f[] was built for the GNOME desktop environment.
There\[aq]s a good chance though that it\[aq]ll work on any window
manager supported by
\f[B]wmctrl\f[] (http://tomas.styblo.name/wmctrl/#about).
.SH XBindKeys
.PP
If your desktop environment doesn\[aq]t offer a way to bind keys to
commands \[em] or if it\[aq]s too limited \[em] take a look at
XBindKeys (http://www.nongnu.org/xbindkeys/xbindkeys.html).
.PP
Example \f[C]\&.xbindkeysrc\f[]:
.IP
.nf
\f[C]
"jumpapp\ chromium"
\ \ control\ +\ alt\ +\ c

"jumpapp\ \-r\ chromium"
\ \ shift\ +\ control\ +\ alt\ +\ c

"jumpapp\ firefox"
\ \ control\ +\ alt\ +\ f

"jumpapp\ \-r\ firefox"
\ \ shift\ +\ control\ +\ alt\ +\ f

"jumpapp\ gnome\-terminal"
\ \ control\ +\ alt\ +\ t

"jumpapp\ \-r\ gnome\-terminal"
\ \ shift\ +\ control\ +\ alt\ +\ t
\f[]
.fi
.SH jumpappify\-desktop\-entry(1)
.PP
\f[B]jumpapp\f[] ships with a helper utility:
.IP
.nf
\f[C]
Usage:\ jumpappify\-desktop\-entry\ SOMEFILE.desktop

Given\ a\ desktop\ entry\ file\ (*.desktop),\ output\ a\ new\ desktop\ entry\ file\ that
wraps\ the\ application\[aq]s\ `Exec`\ in\ a\ call\ to\ jumpapp(1).

EXAMPLES

\ \ \ \ jumpappify\-desktop\-entry\ /usr/share/applications/chromium\-browser.desktop\ \\
\ \ \ \ \ \ \ \ >\ ~/.local/share/applications/chromium\-browser.desktop

Or\ convert\ multiple\ in\ one\ go:

\ \ \ \ for\ entry\ in\ /usr/share/applications/{firefox,gnome\-terminal}.desktop;\ do
\ \ \ \ \ \ \ \ target=~/".local/share/applications/$(basename\ "$entry")"
\ \ \ \ \ \ \ \ jumpappify\-desktop\-entry\ "$entry"\ >"$target"
\ \ \ \ done
\f[]
.fi
.SH See Also
.IP \[bu] 2
Blazing\-Fast Application Switching in
Linux (http://vickychijwani.github.io/2012/04/15/blazing-fast-application-switching-in-linux/)
\[em] a blog post that talks about the advantages of this style of
application switching
.IP \[bu] 2
brocket (https://github.com/dmikalova/brocket) \[em] a Bash script that
works very similiarly to \f[B]jumpapp\f[].
Check it out, particularly if you\[aq]re looking for options for
managing windows in different desktops.
.SH AUTHORS
Michael Kropat <mail@michael.kropat.name>.
